1. let & var
    - scope of let < var
    - var param using as global element, can reassign with or without var
    - let param can be exist in a scope, can reassign without var/let (only param name)

2. const
3. template string
    - using `` instead of '' or "" 
    - using ${} with param

4. for
    # with array
        - for in --> index of array
        - for of --> element of array
    # with object
        - for in --> index --> object[index] ==> key: index & value: object[index]
        - for of --> can not print object 

5. spread
    - is an operator, defined with "..." symbol
    - using for array, to join all element of an array to a any position of another array
    - final array, number of element = sumof(all element)

6. destructuring
    - quickly bind array's element to list var
    - with object, unnecessary to define in correct order, just correctly name
    - if name inccorrect/not exist -> undefined -> using default value

7. default & rest param
    - using as input param of fuction
    - default param: bind to param an default value
    - rest param: using "..." symbol as a list of param, unidentify the exactly number of param will be used
    - if not use all input param as default -> let define default at the end

8. arrow func
    - ignore {} if function's content there is only 1 command
    - ignore () if there is only 1 input param
    - must using () if there are no input param

9. this
    - there are some ways to using this, but common way is using arrow function

10. Enhanced
    - property value shorthand: return the object with input param (instead of creating new attribute & bind input param to it)
    - method properties: remove "function" keyword for short code, method consider as an attribute/property
    - computed property names: dynamic change object property's name